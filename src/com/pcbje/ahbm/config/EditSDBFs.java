/**
 * This work is made available under the Apache License, Version 2.0.
 *
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package com.pcbje.ahbm.config;

import com.pcbje.ahbm.AhbmIngestModule;
import com.pcbje.ahbm.CaseWrapper;
import com.pcbje.ahbm.SdbfSet;
import com.pcbje.ahbm.Sdhash;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JOptionPane;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.ActionRegistration;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;

/**
 *
 * @author pcbje
 */
@ActionID(
        category = "Tools",
        id = "com.pcbje.ahbm.config.EditSDBFs")
@ActionRegistration(
        displayName = "#CTL_EditSDBFs")
@ActionReference(path = "Menu/Tools", position = 1850)
@NbBundle.Messages("CTL_EditSDBFs=Edit SDBF files")
public class EditSDBFs extends javax.swing.JFrame implements ActionListener {

    public EditSDBFs() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        streamSetsArea = new javax.swing.JTextArea();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        streamSetsArea.setColumns(20);
        streamSetsArea.setRows(5);
        jScrollPane1.setViewportView(streamSetsArea);

        org.openide.awt.Mnemonics.setLocalizedText(saveButton, org.openide.util.NbBundle.getMessage(EditSDBFs.class, "EditSDBFs.saveButton.text")); // NOI18N
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(cancelButton, org.openide.util.NbBundle.getMessage(EditSDBFs.class, "EditSDBFs.cancelButton.text")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 379, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(saveButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelButton)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(cancelButton)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        CaseWrapper caseWrapper = new CaseWrapper(AhbmIngestModule.getSettings());
        Sdhash sdhash = new Sdhash(AhbmIngestModule.getSettings());

        File streamsets = caseWrapper.getFileInModuleDir(SdbfSet.DEFAULT_STREAM_SET);

        try {
            sdhash.validateSdbfs(streamSetsArea.getText().split("\n"));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Could not import SDBF", JOptionPane.WARNING_MESSAGE, null);
            return;
        }

        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter(streamsets));
            writer.write(streamSetsArea.getText());
            writer.close();

            JOptionPane.showMessageDialog(null, "All SDBF OK");

            dispose();
        } catch (IOException ex) {
            throw new RuntimeException(ex);
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton saveButton;
    private javax.swing.JTextArea streamSetsArea;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        EditSDBFs editSdbfs = new EditSDBFs();

        CaseWrapper caseWrapper = new CaseWrapper(AhbmIngestModule.getSettings());

        File streamsets = caseWrapper.getFileInModuleDir(SdbfSet.DEFAULT_STREAM_SET);

        try {
            BufferedReader reader = new BufferedReader(new FileReader(streamsets));

            String line;

            while ((line = reader.readLine()) != null) {
                editSdbfs.streamSetsArea.append(line);
                editSdbfs.streamSetsArea.append("\n");
            }
            reader.close();
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }

        editSdbfs.setTitle(org.openide.util.NbBundle.getMessage(EditSDBFs.class, "EditSDBFs.title"));
        editSdbfs.setLocationRelativeTo(null);
        editSdbfs.setVisible(true);
    }
}
