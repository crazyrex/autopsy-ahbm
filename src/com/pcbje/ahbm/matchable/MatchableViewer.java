/**
 * This work is made available under the Apache License, Version 2.0.
 *
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package com.pcbje.ahbm.matchable;

import com.pcbje.ahbm.SdbfSet;
import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.beans.IntrospectionException;
import java.util.HashMap;
import java.util.Map;
import java.util.TooManyListenersException;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.sleuthkit.datamodel.TskCoreException;

@ConvertAsProperties(
        dtd = "-//com.pcbje.ahbm.match//MatchViewer//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "MatchViewer",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "com.pcbje.ahbm.match.MatchViewer")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_MatchViewerAction",
        preferredID = "MatchViewer")
@Messages({
    "CTL_MatchViewerAction=AHBM Viewer",
    "CTL_MatchViewer=MatchViewer Window",
    "HINT_MatchViewer=This is a MatchViewer window"
})
public final class MatchableViewer extends TopComponent implements ExplorerManager.Provider {

    private final ExplorerManager mgr = new ExplorerManager();
    private Matchable rootNode = new Matchable("", null);
    private final MatchableOutlineView view;

    public MatchableViewer() throws IntrospectionException, InterruptedException, TskCoreException, TooManyListenersException {
        initComponents();
        setName("AHBM Viewer");

        view = new MatchableOutlineView(mgr);
        view.getOutline().setRootVisible(false);
        view.addPropertyColumn("parentName", "Matched with");
        view.addPropertyColumn("parentSimilarity", "Similarity score");
        view.addPropertyColumn("referenceSet", "Reference set");
        view.addPropertyColumn("uniquePath", "Unique path");
        view.addPropertyColumn("status", "Status");
        nodes.setLayout(new BorderLayout());
        nodes.add(view, BorderLayout.CENTER);

        mgr.setRootContext(new MatchableChildFactory(null).createNodeForKey(rootNode));

        associateLookup(ExplorerUtils.createLookup(mgr, getActionMap()));
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return mgr;
    }

    public Matchable getRootNode() {
        return rootNode;
    }

    public void addNode(Matchable child) {
        rootNode.addChild(child);
    }

    public Matchable getExistingNode(Matchable probe) {
        return recursiveGetExistingNode(probe, rootNode);
    }

    private Matchable recursiveGetExistingNode(Matchable probe, Matchable parent) {
        Matchable existingNode = null;
        for (Matchable child : parent.getChildren()) {
            if (child == probe) {
                return child;
            }

            existingNode = recursiveGetExistingNode(probe, child);

            if (existingNode != null) {
                return existingNode;
            }
        }

        return existingNode;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nodes = new javax.swing.JPanel();

        javax.swing.GroupLayout nodesLayout = new javax.swing.GroupLayout(nodes);
        nodes.setLayout(nodesLayout);
        nodesLayout.setHorizontalGroup(
            nodesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 371, Short.MAX_VALUE)
        );
        nodesLayout.setVerticalGroup(
            nodesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 196, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(nodes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(nodes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel nodes;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
    }

    void writeProperties(java.util.Properties p) {
        p.setProperty("version", "1.0");
    }

    void readProperties(java.util.Properties p) {
    }

    void expandSelectedNodes() {
        final Map<String, Matchable> matchables = new HashMap<>();
        Matchable matchable;

        for (Node node : mgr.getSelectedNodes()) {
            matchable = node.getLookup().lookup(Matchable.class);

            if (matchable.getContent() != null) {
                matchable.setExpanded(true);

                matchables.put(Long.toString(matchable.getContent().getId()), matchable);
            } else {
                matchables.put(matchable.getFilename(), matchable);
            }
        }

        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new SdbfSet().searchMatching(matchables);

                    for (Node node : mgr.getSelectedNodes()) {
                        view.expandNode(node);
                    }
                } catch (Exception ex) {
                    Exceptions.printStackTrace(ex);
                }
            }
        });
    }
}
